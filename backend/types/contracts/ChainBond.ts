/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ChainBondInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getDecryptConsent"
      | "getPairLastCid"
      | "getPairPublicStats"
      | "getPairStats"
      | "protocolId"
      | "rate"
      | "rateWithCid"
      | "setDecryptConsent"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ConsentUpdated" | "Rated" | "RatedWithCid"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getDecryptConsent",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairLastCid",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairPublicStats",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairStats",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rate",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rateWithCid",
    values: [AddressLike, BytesLike, BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDecryptConsent",
    values: [AddressLike, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDecryptConsent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPairLastCid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPairPublicStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPairStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rateWithCid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDecryptConsent",
    data: BytesLike
  ): Result;
}

export namespace ConsentUpdatedEvent {
  export type InputTuple = [
    owner: AddressLike,
    friend: AddressLike,
    allowed: boolean
  ];
  export type OutputTuple = [owner: string, friend: string, allowed: boolean];
  export interface OutputObject {
    owner: string;
    friend: string;
    allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RatedEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    publicScore: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, publicScore: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    publicScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RatedWithCidEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    publicScore: BigNumberish,
    cid: string
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    publicScore: bigint,
    cid: string
  ];
  export interface OutputObject {
    from: string;
    to: string;
    publicScore: bigint;
    cid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChainBond extends BaseContract {
  connect(runner?: ContractRunner | null): ChainBond;
  waitForDeployment(): Promise<this>;

  interface: ChainBondInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getDecryptConsent: TypedContractMethod<
    [owner: AddressLike, friend: AddressLike],
    [boolean],
    "view"
  >;

  getPairLastCid: TypedContractMethod<
    [owner: AddressLike, friend: AddressLike],
    [string],
    "view"
  >;

  getPairPublicStats: TypedContractMethod<
    [owner: AddressLike, friend: AddressLike],
    [[bigint, bigint] & { sum: bigint; count: bigint }],
    "view"
  >;

  getPairStats: TypedContractMethod<
    [owner: AddressLike, friend: AddressLike],
    [[string, string] & { sum: string; count: string }],
    "view"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  rate: TypedContractMethod<
    [friend: AddressLike, encryptedScore: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  rateWithCid: TypedContractMethod<
    [
      friend: AddressLike,
      encryptedScore: BytesLike,
      inputProof: BytesLike,
      cid: string,
      publicScore: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setDecryptConsent: TypedContractMethod<
    [friend: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getDecryptConsent"
  ): TypedContractMethod<
    [owner: AddressLike, friend: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPairLastCid"
  ): TypedContractMethod<
    [owner: AddressLike, friend: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPairPublicStats"
  ): TypedContractMethod<
    [owner: AddressLike, friend: AddressLike],
    [[bigint, bigint] & { sum: bigint; count: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPairStats"
  ): TypedContractMethod<
    [owner: AddressLike, friend: AddressLike],
    [[string, string] & { sum: string; count: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rate"
  ): TypedContractMethod<
    [friend: AddressLike, encryptedScore: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rateWithCid"
  ): TypedContractMethod<
    [
      friend: AddressLike,
      encryptedScore: BytesLike,
      inputProof: BytesLike,
      cid: string,
      publicScore: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDecryptConsent"
  ): TypedContractMethod<
    [friend: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ConsentUpdated"
  ): TypedContractEvent<
    ConsentUpdatedEvent.InputTuple,
    ConsentUpdatedEvent.OutputTuple,
    ConsentUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Rated"
  ): TypedContractEvent<
    RatedEvent.InputTuple,
    RatedEvent.OutputTuple,
    RatedEvent.OutputObject
  >;
  getEvent(
    key: "RatedWithCid"
  ): TypedContractEvent<
    RatedWithCidEvent.InputTuple,
    RatedWithCidEvent.OutputTuple,
    RatedWithCidEvent.OutputObject
  >;

  filters: {
    "ConsentUpdated(address,address,bool)": TypedContractEvent<
      ConsentUpdatedEvent.InputTuple,
      ConsentUpdatedEvent.OutputTuple,
      ConsentUpdatedEvent.OutputObject
    >;
    ConsentUpdated: TypedContractEvent<
      ConsentUpdatedEvent.InputTuple,
      ConsentUpdatedEvent.OutputTuple,
      ConsentUpdatedEvent.OutputObject
    >;

    "Rated(address,address,uint32)": TypedContractEvent<
      RatedEvent.InputTuple,
      RatedEvent.OutputTuple,
      RatedEvent.OutputObject
    >;
    Rated: TypedContractEvent<
      RatedEvent.InputTuple,
      RatedEvent.OutputTuple,
      RatedEvent.OutputObject
    >;

    "RatedWithCid(address,address,uint32,string)": TypedContractEvent<
      RatedWithCidEvent.InputTuple,
      RatedWithCidEvent.OutputTuple,
      RatedWithCidEvent.OutputObject
    >;
    RatedWithCid: TypedContractEvent<
      RatedWithCidEvent.InputTuple,
      RatedWithCidEvent.OutputTuple,
      RatedWithCidEvent.OutputObject
    >;
  };
}
